import{_ as n,C as r,c as p,o as d,j as e,a as i,al as l,G as a,w as o}from"./chunks/framework.B3Nex8wt.js";const j=JSON.parse('{"title":"Private API","description":"","frontmatter":{},"headers":[],"relativePath":"api/private.md","filePath":"api/private.md","lastUpdated":null}'),u={name:"api/private.md"},c={class:"jldocstring custom-block"},h={class:"jldocstring custom-block"},_={class:"jldocstring custom-block"};function f(k,t,b,m,T,g){const s=r("Badge");return d(),p("div",null,[t[12]||(t[12]=e("h1",{id:"Private-API",tabindex:"-1"},[i("Private API "),e("a",{class:"header-anchor",href:"#Private-API","aria-label":'Permalink to "Private API {#Private-API}"'},"â€‹")],-1)),t[13]||(t[13]=e("p",null,"This is the private API reference for Boltz.jl. You know what this means. Don't use these functions!",-1)),e("details",c,[e("summary",null,[t[0]||(t[0]=e("a",{id:"Boltz.Utils.flatten_spatial-Union{Tuple{AbstractArray{T, 4}}, Tuple{T}} where T",href:"#Boltz.Utils.flatten_spatial-Union{Tuple{AbstractArray{T, 4}}, Tuple{T}} where T"},[e("span",{class:"jlbinding"},"Boltz.Utils.flatten_spatial")],-1)),t[1]||(t[1]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[3]||(t[3]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flatten_spatial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T, 4}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Flattens the first 2 dimensions of <code>x</code>, and permutes the remaining dimensions to (2, 1, 3).</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...t[2]||(t[2]=[e("a",{href:"https://github.com/LuxDL/Boltz.jl/blob/ce87bc9737a63e41eef24348713ea764f1145f4a/src/utils.jl#L17-L21",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",h,[e("summary",null,[t[4]||(t[4]=e("a",{id:"Boltz.Utils.second_dim_mean-Tuple{Any}",href:"#Boltz.Utils.second_dim_mean-Tuple{Any}"},[e("span",{class:"jlbinding"},"Boltz.Utils.second_dim_mean")],-1)),t[5]||(t[5]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[7]||(t[7]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">second_dim_mean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Computes the mean of <code>x</code> along dimension <code>2</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...t[6]||(t[6]=[e("a",{href:"https://github.com/LuxDL/Boltz.jl/blob/ce87bc9737a63e41eef24348713ea764f1145f4a/src/utils.jl#L27-L31",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),e("details",_,[e("summary",null,[t[8]||(t[8]=e("a",{id:"Boltz.Utils.should_type_assert-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T",href:"#Boltz.Utils.should_type_assert-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T"},[e("span",{class:"jlbinding"},"Boltz.Utils.should_type_assert")],-1)),t[9]||(t[9]=i()),a(s,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),t[11]||(t[11]=l('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">should_type_assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>In certain cases, to ensure type-stability we want to add type-asserts. But this won&#39;t work for exotic types like <code>ForwardDiff.Dual</code>. We use this function to check if we should add a type-assert for <code>x</code>.</p>',2)),a(s,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...t[10]||(t[10]=[e("a",{href:"https://github.com/LuxDL/Boltz.jl/blob/ce87bc9737a63e41eef24348713ea764f1145f4a/src/utils.jl#L34-L40",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const v=n(u,[["render",f]]);export{j as __pageData,v as default};
