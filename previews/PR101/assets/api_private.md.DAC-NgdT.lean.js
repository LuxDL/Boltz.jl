import{_ as n,C as o,c as p,o as r,j as t,a as e,a2 as i,G as l}from"./chunks/framework.CeFO9LE2.js";const j=JSON.parse('{"title":"Private API","description":"","frontmatter":{},"headers":[],"relativePath":"api/private.md","filePath":"api/private.md","lastUpdated":null}'),d={name:"api/private.md"},h={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""};function _(b,s,g,f,y,T){const a=o("Badge");return r(),p("div",null,[s[12]||(s[12]=t("h1",{id:"Private-API",tabindex:"-1"},[e("Private API "),t("a",{class:"header-anchor",href:"#Private-API","aria-label":'Permalink to "Private API {#Private-API}"'},"â€‹")],-1)),s[13]||(s[13]=t("p",null,"This is the private API reference for Boltz.jl. You know what this means. Don't use these functions!",-1)),t("details",h,[t("summary",null,[s[0]||(s[0]=t("a",{id:"Boltz.Utils.fast_chunk-Tuple{Int64, Int64}",href:"#Boltz.Utils.fast_chunk-Tuple{Int64, Int64}"},[t("span",{class:"jlbinding"},"Boltz.Utils.fast_chunk")],-1)),s[1]||(s[1]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[2]||(s[2]=i("",3))]),t("details",u,[t("summary",null,[s[3]||(s[3]=t("a",{id:"Boltz.Utils.flatten_spatial-Union{Tuple{AbstractArray{T, 4}}, Tuple{T}} where T",href:"#Boltz.Utils.flatten_spatial-Union{Tuple{AbstractArray{T, 4}}, Tuple{T}} where T"},[t("span",{class:"jlbinding"},"Boltz.Utils.flatten_spatial")],-1)),s[4]||(s[4]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[5]||(s[5]=i("",3))]),t("details",k,[t("summary",null,[s[6]||(s[6]=t("a",{id:"Boltz.Utils.second_dim_mean-Tuple{Any}",href:"#Boltz.Utils.second_dim_mean-Tuple{Any}"},[t("span",{class:"jlbinding"},"Boltz.Utils.second_dim_mean")],-1)),s[7]||(s[7]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[8]||(s[8]=i("",3))]),t("details",c,[t("summary",null,[s[9]||(s[9]=t("a",{id:"Boltz.Utils.should_type_assert-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T",href:"#Boltz.Utils.should_type_assert-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T"},[t("span",{class:"jlbinding"},"Boltz.Utils.should_type_assert")],-1)),s[10]||(s[10]=e()),l(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=i("",3))])])}const A=n(d,[["render",_]]);export{j as __pageData,A as default};
