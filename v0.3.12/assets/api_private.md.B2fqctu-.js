import{_ as s,c as e,o as t,a4 as i}from"./chunks/framework.bN5Qao8N.js";const b=JSON.parse('{"title":"Private API","description":"","frontmatter":{},"headers":[],"relativePath":"api/private.md","filePath":"api/private.md","lastUpdated":null}'),a={name:"api/private.md"},l=i('<h1 id="Private-API" tabindex="-1">Private API <a class="header-anchor" href="#Private-API" aria-label="Permalink to &quot;Private API {#Private-API}&quot;">​</a></h1><p>This is the private API reference for Boltz.jl. You know what this means. Don&#39;t use these functions!</p><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Boltz.Utils.fast_chunk-Tuple{Int64, Int64}" href="#Boltz.Utils.fast_chunk-Tuple{Int64, Int64}">#</a> <b><u>Boltz.Utils.fast_chunk</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fast_chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{n}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Val{dim}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Type-stable and faster version of <code>MLUtils.chunk</code>.</p><p><a href="https://github.com/LuxDL/Boltz.jl/blob/b001128f0093205507361643c07d629532fcb0d8/src/utils.jl#L11-L15" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Boltz.Utils.flatten_spatial-Union{Tuple{AbstractArray{T, 4}}, Tuple{T}} where T" href="#Boltz.Utils.flatten_spatial-Union{Tuple{AbstractArray{T, 4}}, Tuple{T}} where T">#</a> <b><u>Boltz.Utils.flatten_spatial</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flatten_spatial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray{T, 4}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Flattens the first 2 dimensions of <code>x</code>, and permutes the remaining dimensions to (2, 1, 3).</p><p><a href="https://github.com/LuxDL/Boltz.jl/blob/b001128f0093205507361643c07d629532fcb0d8/src/utils.jl#L27-L31" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Boltz.Utils.second_dim_mean-Tuple{Any}" href="#Boltz.Utils.second_dim_mean-Tuple{Any}">#</a> <b><u>Boltz.Utils.second_dim_mean</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">second_dim_mean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>Computes the mean of <code>x</code> along dimension <code>2</code>.</p><p><a href="https://github.com/LuxDL/Boltz.jl/blob/b001128f0093205507361643c07d629532fcb0d8/src/utils.jl#L37-L41" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="Boltz.Utils.should_type_assert-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T" href="#Boltz.Utils.should_type_assert-Union{Tuple{AbstractArray{T}}, Tuple{T}} where T">#</a> <b><u>Boltz.Utils.should_type_assert</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">should_type_assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>In certain cases, to ensure type-stability we want to add type-asserts. But this won&#39;t work for exotic types like <code>ForwardDiff.Dual</code>. We use this function to check if we should add a type-assert for <code>x</code>.</p><p><a href="https://github.com/LuxDL/Boltz.jl/blob/b001128f0093205507361643c07d629532fcb0d8/src/utils.jl#L44-L50" target="_blank" rel="noreferrer">source</a></p></div><br>',10),r=[l];function n(o,d,p,h,c,u){return t(),e("div",null,r)}const g=s(a,[["render",n]]);export{b as __pageData,g as default};
